RSCHK=$_
[[ $RSCHK != $0 ]] || { echo "Error: ${SOURCEDIR}/${BASH_SOURCE[@]##*/} is being ran directly!  Please \"source\" this script."; exit; }
export FUNCTIONS="$( cd "$( dirname "${BASH_SOURCE[0]}" )/" && pwd )/${BASH_SOURCE[0]##*/}"
export FUNCTIONS_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

[[ -f ${FUNCTIONS_DIR}/text.ansi ]] && source ${FUNCTIONS_DIR}/text.ansi


### Authentication Functions ####
sudo-check() {
	[[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Ensures user is either root or a member of the suoders group.\n";return; }
	[[ $EUID -eq 0 ]] && { export SCMD=;[[ ${DEBUG} = True ]] && { echo -en "DEBUG: User is root\n" 1>&2; }; return 0; }
	[[ $EUID -ne 0 && -n $(grep -o sudo <(id 2>/dev/null -Gn)) ]] && { export SCMD="sudo -E";[[ ${DEBUG} = True ]] && { echo -en "DEBUG: User (${USER}) has sudo access.\n"; }; return 0; }
	[[ $EUID -ne 0 && -z $(grep -o sudo <(id 2>/dev/null -Gn)) ]] && { export SCMD="";[[ ${DEBUG} = True ]] && { echo -en "DEBUG: User (${USER}) does NOT have sudo access.\n"; };return 5; }
}

write-sudoers-file() {
	[[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Write a temporary sudoers file in case the customization session exceeds sudo password grace period\n";return; }
	[[ ${WRITE_SUDOERS} = true ]] || return 1
	export SUDOERS_FILE="$(echo ${0##*/}|sed 's/\..*$//1').${USER}.suduoers"
	[[ -f ${SUDOERS_FILE} ]] && true || { printf ''${USER}' ALL=(ALL) NOPASSWD: ALL'|$SCMD tee 1>/dev/null /etc/sudoers.d/${SUDOERS_FILE}; }
	[[ $? -eq 0 ]] && printf "\e[2G - To prevent authentication timeouts, ${SUDOERS_FILE} has\n\e[5Gbeen created in /etc/sudoers.d & will be removed when ${0##*/} finishes.\n\n"
}

sudo-prompt() {
	[[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Ensures cached sudo password is viable, if not, prompts user for password and temporarily disables sudo password requirement.\n";return; }
	sudo-check
	[[ $? -eq 1 ]] && { printf "\n\e[2GERROR: Please ensure that $USER is a member of the sudoers group\n";return 1; }
	printf '\e[2GValidating if cached sudo password is still viable\n'
	if [[ $($SCMD -n uptime > /dev/null 2>&1;echo $?) -eq 1 ]];then
		printf '\e[2G - Cached sudo password has expired.\n'
		printf "\n\e[2GSome functions in ${0##*/} require superuser access.\n\n\e[2GPlease enter password for \"${USER}\" when prompted\n\n"
		sleep 1
		$SCMD bash -c "ls > /dev/null 2>&1"
		[[ $? -eq 0 && ${WRITE_SUDOERS} = true ]] && write-sudoers-file
	else
		[[ ${DEBUG} = true ]] && printf '\e[2G - Cached sudo password is still viable.\n'
		[[ ${WRITE_SUDOERS} = true ]] && write-sudoers-file
	fi
}


### Functions related to URL validation and downloading ###
proxy-check() {
    [[ $1 = '--desc' ]] && { printf "\e[2G${FUNCNAME}: Checks for existence of proxy variables.\n";return; }
    [[ -n $(set -o posix;set|/bin/grep -ioE '^[Aa-Zz]*_PROXY'|sed '/^MAAS/d') ]] && { echo true;return 0; } || { echo false;return 1; }
}

uvars() {
	[[ -z ${1} || ${1} =~ -h ]] && { echo -en "Usage: ./${0##*/} <path to ossa-lite archive>\nNote: sudo access is required\n" 1>&2;exit 2; }
	local UVAR="${1}"
	unset $(set -o posix;set|/bin/grep -oE ''$(printf "^${UVAR}?(_)*%s*[^=]+\n")''|paste -sd" ")
}
svars() {
	local SVAR="${1}"
	(set -o posix;set|/bin/grep -oE ''$(printf "^${SVAR}?(_)*%s*[^=]+\n")'')|xargs -rn1 -P1 bash -c 'eval echo ${0}=\$${0}'
}

make-csv-array() {
declare -ag UBU_URLS=( http://releases.ubuntu.com http://old-releases.ubuntu.com/releases );     
declare -ag UBU_RELEASES_CSV=($(printf '%s\n' ${UBU_URLS[@]}|(xargs -rn1 -P0 -I{} curl -sSlL {}|awk -vRS=">|<" '/^Ubuntu.[0-9]+.*'${CODENAME^}'/{gsub(/\(|\).*$|LTS |Beta /,"");gsub(/\.[0-9]$/,"",$2);split($2,a,/\./);print tolower($2),tolower($3),tolower($4)}')|sort -uV|sed 's/ /,/g'))
printf '%s\n' ${UBU_RELEASES_CSV[@]}|tee 1>/dev/null ubuntu-releases.csv
}


kill-biters() {
	[[ $1 = '--desc' ]] && { printf "${RO}${FUNCNAME}${RT}: Kill all zombie processes\n";return; }
	sudo-prompt   
	$SCMD kill $(ps -A -ostat,ppid | awk '/[zZ]/{print $2}')
	}

show-release-info() {
(printf "Release|Code Name|Release Type|Days until EOS (Date)|Days until EOL (Date)\n"
(printf '%s\n' "${UBU_RELEASES_CSV[@]//,/ }"| \
while read -er RELEASE CN1 CN2;do
[[ $((${RELEASE%%\.*} % 2)) -eq 1 || ! ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "\e[38;2;160;160;160;3mInterim\e[0m") SL=182 SD=days EL=0; }
[[ $((${RELEASE%%\.*} % 2)) -eq 0 && ${RELEASE%%\.*} -le 10 && ${RELEASE%%\.*} -ge 6 ]] && [[ ${RELEASE##*\.} = 06 || ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "LTS \e[38;2;160;160;160m(3 yrs)\e[0m") SL=3 SD=years EL=0; }
[[ $((${RELEASE%%\.*} % 2)) -eq 0 && ${RELEASE%%\.*} -le 16 && ${RELEASE%%\.*} -ge 12 && ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "LTS \e[38;2;160;160;160m(5 yrs)\e[0m") SL=5 SD=years EL=8; }
[[ $((${RELEASE%%\.*} % 2)) -eq 0 && ${RELEASE%%\.*} -ge 18 && ${RELEASE##*\.} = 04 ]] && { export FLAG=$(printf "LTS \e[38;2;160;160;160m(10 yrs)\e[0m") SL=5 SD=years EL=10; }
EOS_END=$(date -d "$(date -d "$([[ ${RELEASE%%\.*} -le 99 ]] && echo -n $((${RELEASE%%\.*}+2000)) || echo -n $((${RELEASE%%\.*}+3000)))$(printf '%02d' $((10#${RELEASE##*\.}+1)))01 -1 day" +%Y%m%d) +${SL} ${SD}" +%Y%m%d)
EOL_END=$(date -d "$(date -d "$([[ ${RELEASE%%\.*} -le 99 ]] && echo -n $((${RELEASE%%\.*}+2000)) || echo -n $((${RELEASE%%\.*}+3000)))$(printf '%02d' $((10#${RELEASE##*\.}+1)))01 -1 day" +%Y%m%d) +${EL} ${SD}" +%Y%m%d)
EOS_DAYS_REMAINING=$((($(date -d ${EOS_END} +%s)-$(date +%s))/(60*60*24)))
[[ ${EL} = 0 ]] && EOL_DAYS_REMAINING=0 || EOL_DAYS_REMAINING=$((($(date -d ${EOL_END} +%s)-$(date +%s))/(60*60*24)))
if [[ ${EOS_DAYS_REMAINING} -le 0 ]];then
EOS_DAYS_REMAINING=$(printf "\e[38;2;160;160;160;3mExpired\e[0m")
elif [[ ${EOS_DAYS_REMAINING} -le 30 && ${EOS_DAYS_REMAINING} -gt 0 ]];then EOS_DAYS_REMAINING=$(printf "\e[38;2;255;0;0m${EOS_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOS_END})" '+%d/%B/%Y'))")
elif [[ ${EOS_DAYS_REMAINING} -lt 365 && ${EOS_DAYS_REMAINING} -gt 0 ]];then EOS_DAYS_REMAINING=$(printf "\e[38;2;255;225;0m${EOS_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOS_END})" '+%d/%b/%Y'))")
elif [[ ${EOS_DAYS_REMAINING} -gt 365 && ${EOS_DAYS_REMAINING} -gt 0 ]];then EOS_DAYS_REMAINING=$(printf "\e[38;2;0;235;0m${EOS_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOS_END})" '+%d/%b/%Y'))");fi
if [[ ${EOL_DAYS_REMAINING} -le 0 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;160;160;160;3mExpired\e[0m")
elif [[ ${EOL_DAYS_REMAINING} -le 30 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;225;0;0m${EOL_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOL_END})" '+%d/%b/%Y'))")
elif [[ ${EOL_DAYS_REMAINING} -lt 365 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;255;200;0m${EOL_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOL_END})" '+%d/%b/%Y'))")
elif [[ ${EOL_DAYS_REMAINING} -gt 365 ]];then EOL_DAYS_REMAINING=$(printf "\e[38;2;0;235;0m${EOL_DAYS_REMAINING} days\e[0m ($(date -d "$(date +${EOL_END})" '+%d/%b/%Y'))");fi
[[ ${EL} = 0 ]] && EOL_DAYS_REMAINING=$(printf "\e[38;2;160;160;160;3mN/A\e[0m")
echo "Ubuntu ${RELEASE^}|${CN1^} ${CN2^}|${FLAG^}|${EOS_DAYS_REMAINING}|${EOL_DAYS_REMAINING}"
done))|column -nexts"|"|sed '2s/^.*$/'$(printf "\e[1m&\e[0m")'/g'|tee 1>/dev/null release-info.ansi
sed 2>/dev/null 's/\x1b\[[0-9;]*[a-zA-Z]//g' release-info.ansi|tee 1>/dev/null release-info.txt
};export -f show-release-info

show-repo-info() {
# Show package breakdown by component and suite
if [[ -f ${APT_MADISON} ]];then
	declare -ag COMPONENTS=(main universe multiverse restricted)
	declare -ag POCKETS=(${OSSA_CODENAME} ${OSSA_CODENAME}-updates ${OSSA_CODENAME}-security ${OSSA_CODENAME}-backports ${OSSA_CODENAME}-proposed)
	for x in ${COMPONENTS[@]};do
		declare -ag ${x^^}=\(\);eval ${x^^}+=\( $(grep "/${x}" ${APT_MADISON}|wc -l) \)
		for y in ${POCKETS[@]};do
			eval ${x^^}+=\( ${y}:$(grep "${y}/${x}" ${APT_MADISON}|wc -l) \)
		done
	done
	export COMPONENT_TOTAL=$((${MAIN[0]##*:}+${UNIVERSE[0]##*:}+${MULTIVERSE[0]##*:}+${RESTRICTED[0]##*:}))
	export RELEASE_TOTAL=$((${MAIN[1]##*:}+${UNIVERSE[1]##*:}+${MULTIVERSE[1]##*:}+${RESTRICTED[1]##*:}))
	export UPDATES_TOTAL=$((${MAIN[2]##*:}+${UNIVERSE[2]##*:}+${MULTIVERSE[2]##*:}+${RESTRICTED[2]##*:}))
	export SECURITY_TOTAL=$((${MAIN[3]##*:}+${UNIVERSE[3]##*:}+${MULTIVERSE[3]##*:}+${RESTRICTED[3]##*:}))
	export BACKPORTS_TOTAL=$((${MAIN[4]##*:}+${UNIVERSE[4]##*:}+${MULTIVERSE[4]##*:}+${RESTRICTED[4]##*:}))
	export PROPOSED_TOTAL=$((${MAIN[5]##*:}+${UNIVERSE[5]##*:}+${MULTIVERSE[5]##*:}+${RESTRICTED[5]##*:}))	
	((for ((i=0; i<${#POCKETS[@]}; i++)); do printf '%s\n' ${POCKETS[i]};done|paste -sd"|"|sed 's/^/Ubuntu '${OSSA_CODENAME^}'|'${OSSA_HOST}'|/g'
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[0]} ${MAIN[0]##*:} ${MAIN[1]##*:} ${MAIN[2]##*:} ${MAIN[3]##*:} ${MAIN[4]##*:} ${MAIN[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[1]} ${UNIVERSE[0]##*:} ${UNIVERSE[1]##*:} ${UNIVERSE[2]##*:} ${UNIVERSE[3]##*:} ${UNIVERSE[4]##*:} ${UNIVERSE[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[2]} ${MULTIVERSE[0]##*:} ${MULTIVERSE[1]##*:} ${MULTIVERSE[2]##*:} ${MULTIVERSE[3]##*:} ${MULTIVERSE[4]##*:} ${MULTIVERSE[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' ${COMPONENTS[3]} ${RESTRICTED[0]##*:} ${RESTRICTED[1]##*:} ${RESTRICTED[2]##*:} ${RESTRICTED[3]##*:} ${RESTRICTED[4]##*:} ${RESTRICTED[5]##*:}
	printf '%s|%s|%s|%s|%s|%s|%s\n' Totals ${COMPONENT_TOTAL} ${RELEASE_TOTAL} ${UPDATES_TOTAL} ${SECURITY_TOTAL} ${BACKPORTS_TOTAL} ${PROPOSED_TOTAL}
	)|column -nexts"|"|tee ${OSSA_WORKDIR}/package_table.txt| \
	sed -re '1s/Ubuntu '${OSSA_CODENAME^}'/'$(printf "\e[1;48;2;233;84;32m\e[1;38;2;255;255;255m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_HOST}'/'$(printf "\e[1;48;2;255;255;255m\e[1;38;2;233;84;32m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'-updates/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'-security/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/' \
		-re '1s/'${OSSA_CODENAME}'-backports/'$(printf "\e[38;2;255;200;0m")'&'$(printf "\e[0m")'/g' \
		-re '1s/'${OSSA_CODENAME}'-proposed/'$(printf "\e[38;2;255;0;0m")'&'$(printf "\e[0m")'/g' \
		-re 's/main|universe/'$(printf "\e[38;2;0;255;0m")'&'$(printf "\e[0m")'/g' \
		-re 's/multiverse.*$|restricted.*$/'$(printf "\e[38;2;255;0;0m")'&'$(printf "\e[0m")'/g')|sed 's/^.*$/ &/g'|tee ${OSSA_WORKDIR}/package_table.ansi
		printf '\n\n'
fi
}
